//package com.pc.LeetCode.题286;
//
//import com.pc.LeetCode.common.Uitls;
//
//
///**
// * 286. 墙与门
// * 你被给定一个 m × n 的二维网格 rooms ，网格中有以下三种可能的初始化值：
// * <p>
// * -1 表示墙或是障碍物
// * 0 表示一扇门
// * INF 无限表示一个空的房间。然后，我们用 231 - 1 = 2147483647 代表 INF。你可以认为通往门的距离总是小于 2147483647 的。
// * 你要给每个空房间位上填上该房间到 最近门的距离 ，如果无法到达门，则填 INF 即可。<br/>
// * <img src="https://assets.leetcode.com/uploads/2021/01/03/grid.jpg" />
// */
//public class Solution {
//
//    int[][] d = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
//
//    public void wallsAndGates(int[][] rooms) {
//
//        int[][] visited = new int[rooms.length][rooms[0].length];
//
//        for (int i = 0; i < rooms.length; i++) {
//            for (int j = 0; j < rooms[i].length; j++) {
//                dfs(rooms, i, j, visited);
//                // 已经有最终结果了的格子
//                visited[i][j] = 2;
//            }
//        }
//        // System.out.println(JSON.toJSONString(rooms));
//    }
//
//    private Tuptle dfs(int[][] rooms, int i, int j, int[][] visited) {
//
//        if (i < 0 || i >= rooms.length || j < 0 || j >= rooms[0].length) {
//            return Tuptle.fail();
//        }
//
//        // -1 表示遇到障碍物
//        if (rooms[i][j] == -1) {
//            return Tuptle.fail();
//        }
//
//        // 1 表示遍历过
//        if (visited[i][j] == 1) {
//            return Tuptle.fail();
//        }
//
//        // 遇到门
//        if (rooms[i][j] == 0) {
//            return Tuptle.success(0);
//        }
//
//        if (visited[i][j] ==2 && rooms[i][j] != Integer.MAX_VALUE){
//            // 已经有结果的空格
//            // System.out.println("已经访问过：rooms[" + i + "]" + "[" + j + "]");
//            return Tuptle.success(rooms[i][j]);
//        } else {
//            // 代表已经访问过
//            visited[i][j] = 1;
//            int min = Integer.MAX_VALUE;
//            boolean success = false;
//            for (int k = 0; k < d.length; k++) {
//                int row = d[k][0] + i;
//                int col = d[k][1] + j;
//                Tuptle tuptle = dfs(rooms, row, col, visited);
//                if (tuptle.isAccess) {
//                    min = Math.min(min, tuptle.len);
//                    success = true;
//                }
//            }
//            visited[i][j] = 0;
//            // 已经遍历过后，置为正确的路径长度
//            if (success) {
//                rooms[i][j] = min + 1;
//                return Tuptle.success(min + 1);
//            }
//            return Tuptle.fail();
//        }
//
//    }
//    static class Tuptle {
//        // 是否与门连通
//        public boolean isAccess;
//        // 与门连通的长度
//        private int len;
//
//        private Tuptle() {
//
//        }
//
//        private Tuptle(boolean isAccess, int len) {
//            this.isAccess = isAccess;
//            this.len = len;
//
//        }
//
//        public static Tuptle success(int len) {
//            return new Tuptle(true, len);
//        }
//
//        public static Tuptle fail() {
//            return new Tuptle(false, 0);
//        }
//
//    }
//
//    public static void main(String[] args) {
//        Solution solution = new Solution();
//        System.out.println(Integer.MAX_VALUE);
//        solution.wallsAndGates(new int[][]{{-1}});
//        solution.wallsAndGates(new int[][]{{2147483647}});
//        solution.wallsAndGates(new int[][]{{0}});
//        solution.wallsAndGates(new int[][]{{2147483647, -1, 0, 2147483647}, {2147483647, 2147483647, 2147483647, -1}, {2147483647, -1, 2147483647, -1}, {0, -1, 2147483647, 2147483647}});
//        solution.wallsAndGates(new int[][]{{2147483647, -1, 0, 2147483647}, {2147483647, 2147483647, 2147483647, -1}});
//        solution.wallsAndGates(new int[][]{{2147483647, -1, 0, 2147483647}, {2147483647, 2147483647, 2147483647, -1}, {2147483647, -1, 2147483647, -1}});
//        String str = "[[0,2147483647,2147483647,0,-1,-1,0,0,0,-1,-1,0,2147483647,2147483647]," +
//                "[2147483647,-1,2147483647,-1,2147483647,0,-1,2147483647,-1,2147483647,2147483647,-1,-1,2147483647]," +
//                "[0,0,-1,2147483647,-1,2147483647,-1,-1,2147483647,0,0,2147483647,0,2147483647]," +
//                "[-1,0,2147483647,-1,0,0,-1,2147483647,0,2147483647,0,-1,0,-1]]";
//
//        str = "[[0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647]," +
//                "[2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647]]";
////                "[2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0,2147483647],[2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,0]]";
//        int[][] convert = Uitls.convertToInts(str);
//        solution.wallsAndGates(convert);
//    }
//}
